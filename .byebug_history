exit
idl
idl.int8
idl.null
idl
exit
idl
get_type(raw_table, table, t)
t
exit
t
raw_table
exit
n
raw_table
n
ret_types
n
raw_types
n
LEB128.decode_signed(res)
exit
raw_types
raw_table
sk
exit
a.string
a.putc(127)
a = StringIO.new
"7f".hex
"7f".hex.to_i(10)
"7f".to_i(10)
"7f".to_i
LEB128.encode_signed(-1).bytes.size
LEB128.encode_signed(-1).each_byte {|b| print b, ' 1111' }
LEB128.encode_signed(-1).each_byte {|b| print b, ' ' }
LEB128.encode_signed(-1).bytes
"7f".force_encoding("utf-8")
"7f".force_encoding("iso-8859-1")
"7f".force_encoding("iso-8859-1"))
"7f".force_encoding("iso-8859-1"), "b")
"7f".encode("utf-8")
"7f".encode
StringIO.new("\u007F").string == LEB128.encode_signed(-1).string
StringIO.new("\u007F") == LEB128.encode_signed(-1)
StringIO.new("\u007F").string == LEB128.encode_signed(-1)
StringIO.new("\u007F").string
StringIO.new("7f").string
res = StringIO.new("7f").string
LEB128.encode_signed(-1).string
LEB128.encode_signed(-1)
res = StringIO.new("7f")
res = StringIO.new
LEB128.encode_signed(-1).string.str2hex.hex2str.bytes
LEB128.encode_signed(-1).string.str2hex.hex2str
LEB128.decode_signed(res)
rec = "7f".hex2str
res = StringIO.new
LEB128.encode_signed(-1).string.str2hex.hex2str
LEB128.encode_signed(-1).string.str2hex
LEB128.encode_signed(-1).string
LEB128.encode_signed(-1).string.hex
LEB128.encode_signed(-1).string
"7f".encode('utf-8')
"7f".to_hex(prefixall: '0x')
"7".to_hex(prefixall: '0x')
"f".unpack('H*')[0]
"7".unpack('H*')[0]
" ".unpack('H*')[0]
" ".unpack(‘H*’)[0]
LEB128.encode_signed(-1).string
res.string
res.putc('f')
res.putc('7')
res = StringIO.new
res.putc('7')
res.putc(7')
res.string
res.putc("f")
res.putc("7")
res = StringIO.new
LEB128.encode_signed(-1).string
"7".bytes
"7".byte
"7".to_hex
"7".hex
"7".chr
"7f"
LEB128.encode_signed(-1).string.hex
LEB128.encode_signed(-1).string
LEB128.encode_signed(-1).getc
LEB128.encode_signed(-1).each_byte[0]
LEB128.encode_signed(-1).each_byte
LEB128.encode_signed(-1).bytes
LEB128.encode_signed(-1).string.bytes
LEB128.encode_signed(-1).string
LEB128.encode_signed(-1)
55.chr
LEB128.decode_signed(res)
res << "7f"
res = StringIO.new
LEB128.decode_signed(res)
exit
safe_read(pipe, count + 1)
res << safe_read(pipe, count + 1).hex
res = StringIO.new
safe_read(pipe, count + 1)
exit
types_len = leb128u_decode(pipe).to_i
exit
LEB128.decode_signed(res).chr
LEB128.decode_signed(res)
res << "01".hex
res = StringIO.new
"18".hex
"08".hex
"01".hex
LEB128.encode_signed(7).string
LEB128.encode_signed(07).string
LEB128.encode_signed(09).string
LEB128.encode_signed(9).string
LEB128.encode_signed(09).string
LEB128.encode_signed(7).string
LEB128.encode_signed(07).string
LEB128.encode_signed(02).string
LEB128.encode_signed(08).string
LEB128.encode_signed(01).string
LEB128.encode_signed(0f).string
LEB128.encode_signed(11).string
"01".bytes
LEB128.encode_signed(1).string
LEB128.encode_signed(01).string
"01".str2hex
"01".strtohex
LEB128.encode_signed(01).string
LEB128.encode_signed(01)
LEB128.decode_signed(res)
res << "1".chr
res << "0".chr
res = StringIO.new
"01".bytes.each do |b| res << b; end;
"01".bytes
"01".bytes.each do |b|
res = StringIO.new
res = StringIO.new("01".bytes)
res = StringIO.new(01)
LEB128.decode_signed(LEB128.encode_signed(01))
LEB128.encode_signed(01).string
LEB128.decode_signed(res)
res = StringIO.new("01")
LEB128.decode_signed(res)
res << "1"
res << "0"
res = StringIO.new
LEB128.encode_signed(1).string
LEB128.encode_signed(01).string
LEB128.encode_signed(01)
LEB123.encode_signed(01)
LEB128.decode_signed(res)
res << "0x01"
LEB128.decode_signed(res)
res << "01"
res = StringIO.new
pipe
types_len = leb128u_decode(pipe).to_i
exit
rawTypes
rawTable
rawTable, rawTypes
exit
types_len = leb128u_decode(pipe)
n
type_table_len
LEB128.decode_signed(res)
exit
"01" < "80"
"01".ord
"00".ord
LEB128.decode_signed(res).chr
LEB128.decode_signed(res)
res << "00"
res = StringIO.new
rawTable, rawTypes = read_type_table(b)
prefix_buffer = safe_read(b, PREFIX.length).hex2str
exit
pipe
exit
a[0,2]
a[0,1]
a = "01234"
type_table_len = leb128u_decode(pipe).to_i
pipe
type_table_len
exit
type_table_len.to_s.hex2str
type_table_len.hex2str
type_table_len
49.chr
48.chr
pipe
type_table_len = leb128u_decode(pipe)
pipe.length
pipe
type_table_len = leb128u_decode(pipe)
exit
res = safe_read(pipe, count + 1)
pipe.buffer[3].ord
pipe.buffer[2].ord
pipe.buffer[1].ord
pipe
count
LEB128.decode_signed(res)
String.new(res)
res
exit
LEB128.decode_signed(res)
res
exit
LEB128.decode_signed(res)
res << '1'
res << '0'
res = StringIO.new
'0'.to_c
"0".chr
"0".char
res.putc("0".bytes)
res = StringIO.new
"0".bytes
"0".byte
"0".to_char
"0".char
LEB128.encode_signed(48).string
LEB128.encode_signed(48)
LEB128.decode_signed(StringIO.new(res))
StringIO.new(res)
"\x80".chr
"0x80".chr
char(0x80)
LEB128.decode_signed(StringIO.new(res))
StringIO.new(res)
byte = safe_read_byte(pipe)StringIO.new
LEB128.decode_signed(res)
res
exit
byte = safe_read_byte(pipe)
pipe
byte = safe_read_byte(pipe)
exit
safe_read_byte(pipe)
res
exit
pipe
type_table_len = leb128u_decode(pipe)
pipe
sk
"DIDL".bytesize
