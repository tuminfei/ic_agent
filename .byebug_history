exit
@fields = Hash[field.sort_by { |k, _| IcAgent::Utils.label_hash(k.to_s) }]
IcAgent::Utils.label_hash(field.keys[0].to_s)
field.keys[0].to_s
field.keys[0]
field.keys
field.sort_by { |k, _| IcAgent::Utils.label_hash(k) }
field
exit
field_value
field_value.send(:build_type_table, type_table)
field_value
exit
@fields.each_value(&:build_type_table, type_table)
type_table
@fields.values[0].build_type_table
@fields.values[0]
@fields.values
@fields.value
@fields
type_table
exit
s
exit
s
exit
unicode_to_hex(t.encode_type(typetable).string)
t.encode_type(typetable)
typetable
t
exit
type_table.index_of(self.name)
self.name
type_table
exit
byte = safe_read_byte(pipe)
pipe
sk
args
exit
params = [{'type': IcAgent::Candid::BaseTypes.null, 'value': nil}]
args.size
args
sk
n
exit
n
self
@idx
@typs
exit
self._build_type_table_impl(type_table)
exit
self._build_type_table_impl
self._build_type_table_impl(type_table)
self
self._build_type_table_impl(type_table)
exit
type_table
self._build_type_table_impl(type_table)
exit
type_table.has(self)
self
exit
n
typetable
item.build_type_table(typetable)
exit
item.build_type_table(typetable)
typetable
item
args
arg_types
exit
params
arg_types
item
